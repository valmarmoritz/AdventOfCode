using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace puzzle5
{
    class Stack
    {
        public int Id;
        public string crate;
        public LinkedList<string> crates;

    static void Main()
    {
            List<Stack> stacks = new List<Stack>();
            
            stacks.Add(new Stack { Id = 1, crates = new LinkedList<string>() });
            stacks.Find(x => x.Id == 1).crates.AddLast("W");
            stacks.Find(x => x.Id == 1).crates.AddLast("R");
            stacks.Find(x => x.Id == 1).crates.AddLast("F");

            stacks.Add(new Stack { Id = 2, crates = new LinkedList<string>() });
            stacks.Find(x => x.Id == 2).crates.AddLast("T");
            stacks.Find(x => x.Id == 2).crates.AddLast("H");
            stacks.Find(x => x.Id == 2).crates.AddLast("M");
            stacks.Find(x => x.Id == 2).crates.AddLast("C");
            stacks.Find(x => x.Id == 2).crates.AddLast("D");
            stacks.Find(x => x.Id == 2).crates.AddLast("V");
            stacks.Find(x => x.Id == 2).crates.AddLast("W");
            stacks.Find(x => x.Id == 2).crates.AddLast("P");

            stacks.Add(new Stack { Id = 3, crates = new LinkedList<string>() });
            stacks.Find(x => x.Id == 3).crates.AddLast("P");
            stacks.Find(x => x.Id == 3).crates.AddLast("M");
            stacks.Find(x => x.Id == 3).crates.AddLast("Z");
            stacks.Find(x => x.Id == 3).crates.AddLast("N");
            stacks.Find(x => x.Id == 3).crates.AddLast("L");

            stacks.Add(new Stack { Id = 4, crates = new LinkedList<string>() });
            stacks.Find(x => x.Id == 4).crates.AddLast("J");
            stacks.Find(x => x.Id == 4).crates.AddLast("C");
            stacks.Find(x => x.Id == 4).crates.AddLast("H");
            stacks.Find(x => x.Id == 4).crates.AddLast("R");

            stacks.Add(new Stack { Id = 5, crates = new LinkedList<string>() });
            stacks.Find(x => x.Id == 5).crates.AddLast("C");
            stacks.Find(x => x.Id == 5).crates.AddLast("P");
            stacks.Find(x => x.Id == 5).crates.AddLast("G");
            stacks.Find(x => x.Id == 5).crates.AddLast("H");
            stacks.Find(x => x.Id == 5).crates.AddLast("Q");
            stacks.Find(x => x.Id == 5).crates.AddLast("T");
            stacks.Find(x => x.Id == 5).crates.AddLast("B");

            stacks.Add(new Stack { Id = 6, crates = new LinkedList<string>() });
            stacks.Find(x => x.Id == 6).crates.AddLast("G");
            stacks.Find(x => x.Id == 6).crates.AddLast("C");
            stacks.Find(x => x.Id == 6).crates.AddLast("W");
            stacks.Find(x => x.Id == 6).crates.AddLast("L");
            stacks.Find(x => x.Id == 6).crates.AddLast("F");
            stacks.Find(x => x.Id == 6).crates.AddLast("Z");

            stacks.Add(new Stack { Id = 7, crates = new LinkedList<string>() });
            stacks.Find(x => x.Id == 7).crates.AddLast("W");
            stacks.Find(x => x.Id == 7).crates.AddLast("V");
            stacks.Find(x => x.Id == 7).crates.AddLast("L");
            stacks.Find(x => x.Id == 7).crates.AddLast("Q");
            stacks.Find(x => x.Id == 7).crates.AddLast("Z");
            stacks.Find(x => x.Id == 7).crates.AddLast("J");
            stacks.Find(x => x.Id == 7).crates.AddLast("G");
            stacks.Find(x => x.Id == 7).crates.AddLast("C");

            stacks.Add(new Stack { Id = 8, crates = new LinkedList<string>() });
            stacks.Find(x => x.Id == 8).crates.AddLast("P");
            stacks.Find(x => x.Id == 8).crates.AddLast("N");
            stacks.Find(x => x.Id == 8).crates.AddLast("R");
            stacks.Find(x => x.Id == 8).crates.AddLast("F");
            stacks.Find(x => x.Id == 8).crates.AddLast("W");
            stacks.Find(x => x.Id == 8).crates.AddLast("T");
            stacks.Find(x => x.Id == 8).crates.AddLast("V");
            stacks.Find(x => x.Id == 8).crates.AddLast("C");

            stacks.Add(new Stack { Id = 9, crates = new LinkedList<string>() });
            stacks.Find(x => x.Id == 9).crates.AddLast("J");
            stacks.Find(x => x.Id == 9).crates.AddLast("W");
            stacks.Find(x => x.Id == 9).crates.AddLast("H");
            stacks.Find(x => x.Id == 9).crates.AddLast("G");
            stacks.Find(x => x.Id == 9).crates.AddLast("R");
            stacks.Find(x => x.Id == 9).crates.AddLast("S");
            stacks.Find(x => x.Id == 9).crates.AddLast("V");

            foreach (var s in stacks)
            {
                Console.Write("Stack: " + s.Id + ", Crates: ");
                foreach (var c in s.crates)
                {
                    Console.Write(c + " ");
                }
                Console.WriteLine();
            }

            Console.Write("Top crates: ");
            foreach (var s in stacks)
            {
                Console.Write(s.crates.Last());
            }
            Console.WriteLine();

            Move(2, 4, 9);
            Move(5, 2, 9);
            Move(1, 5, 1);
            Move(3, 1, 4);
            Move(2, 4, 6);
            Move(7, 6, 9);
            Move(5, 3, 9);
            Move(1, 8, 6);
            Move(3, 2, 3);
            Move(12, 9, 3);
            Move(4, 9, 7);
            Move(15, 3, 9);
            Move(1, 1, 5);
            Move(2, 6, 5);
            Move(18, 9, 1);
            Move(6, 8, 1);
            Move(1, 8, 7);
            Move(5, 7, 2);
            Move(6, 1, 2);
            Move(7, 9, 6);
            Move(6, 1, 3);
            Move(5, 3, 9);
            Move(3, 9, 1);
            Move(1, 7, 9);
            Move(4, 2, 1);
            Move(5, 6, 3);
            Move(1, 3, 4);
            Move(1, 5, 9);
            Move(2, 9, 6);
            Move(5, 5, 9);
            Move(10, 1, 8);
            Move(4, 3, 8);
            Move(3, 4, 9);
            Move(4, 6, 9);
            Move(14, 8, 6);
            Move(1, 3, 8);
            Move(14, 9, 4);
            Move(6, 1, 6);
            Move(1, 8, 2);
            Move(3, 5, 8);
            Move(1, 8, 9);
            Move(1, 8, 1);
            Move(5, 4, 9);
            Move(1, 8, 4);
            Move(3, 9, 4);
            Move(3, 7, 5);
            Move(7, 6, 3);
            Move(7, 4, 1);
            Move(3, 9, 1);
            Move(7, 2, 3);
            Move(1, 4, 8);
            Move(8, 6, 2);
            Move(2, 7, 4);
            Move(1, 7, 4);
            Move(1, 7, 9);
            Move(1, 5, 9);
            Move(1, 9, 4);
            Move(1, 4, 2);
            Move(8, 4, 9);
            Move(1, 4, 2);
            Move(5, 9, 4);
            Move(2, 6, 9);
            Move(1, 6, 9);
            Move(1, 8, 1);
            Move(13, 3, 2);
            Move(1, 3, 9);
            Move(2, 6, 8);
            Move(1, 8, 1);
            Move(14, 1, 7);
            Move(4, 2, 1);
            Move(2, 9, 5);
            Move(3, 9, 7);
            Move(1, 8, 2);
            Move(4, 1, 5);
            Move(1, 4, 7);
            Move(3, 9, 1);
            Move(7, 7, 4);
            Move(14, 2, 8);
            Move(3, 1, 7);
            Move(3, 5, 4);
            Move(2, 1, 9);
            Move(11, 8, 9);
            Move(3, 7, 8);
            Move(3, 8, 6);
            Move(6, 4, 3);
            Move(2, 6, 8);
            Move(8, 4, 3);
            Move(3, 8, 7);
            Move(2, 8, 2);
            Move(2, 3, 9);
            Move(1, 6, 8);
            Move(5, 2, 7);
            Move(10, 9, 7);
            Move(1, 8, 5);
            Move(3, 5, 2);
            Move(6, 7, 5);
            Move(19, 7, 3);
            Move(9, 5, 9);
            Move(6, 2, 6);
            Move(2, 7, 3);
            Move(29, 3, 8);
            Move(2, 7, 9);
            Move(5, 8, 1);
            Move(12, 9, 6);
            Move(1, 3, 8);
            Move(1, 2, 7);
            Move(1, 3, 1);
            Move(10, 6, 1);
            Move(1, 6, 7);
            Move(9, 1, 9);
            Move(2, 1, 2);
            Move(12, 9, 4);
            Move(7, 6, 3);
            Move(8, 3, 7);
            Move(5, 7, 6);
            Move(19, 8, 3);
            Move(10, 4, 6);
            Move(1, 4, 6);
            Move(6, 8, 6);
            Move(1, 4, 2);
            Move(6, 6, 3);
            Move(3, 2, 7);
            Move(13, 6, 3);
            Move(1, 9, 1);
            Move(6, 1, 8);
            Move(1, 6, 5);
            Move(1, 5, 4);
            Move(3, 7, 1);
            Move(2, 1, 3);
            Move(11, 3, 8);
            Move(1, 4, 3);
            Move(3, 8, 4);
            Move(1, 7, 5);
            Move(3, 8, 9);
            Move(2, 9, 2);
            Move(7, 8, 3);
            Move(1, 7, 9);
            Move(1, 1, 4);
            Move(32, 3, 4);
            Move(1, 5, 9);
            Move(2, 8, 3);
            Move(2, 6, 4);
            Move(1, 9, 4);
            Move(1, 9, 2);
            Move(3, 3, 1);
            Move(1, 8, 6);
            Move(1, 6, 2);
            Move(1, 9, 3);
            Move(1, 1, 7);
            Move(1, 8, 7);
            Move(2, 3, 8);
            Move(1, 8, 4);
            Move(1, 1, 2);
            Move(2, 4, 8);
            Move(1, 1, 8);
            Move(26, 4, 6);
            Move(3, 8, 5);
            Move(3, 7, 6);
            Move(7, 6, 3);
            Move(18, 6, 8);
            Move(16, 8, 9);
            Move(1, 5, 1);
            Move(2, 8, 3);
            Move(3, 9, 8);
            Move(3, 6, 4);
            Move(2, 5, 4);
            Move(1, 6, 4);
            Move(2, 7, 2);
            Move(2, 3, 9);
            Move(4, 8, 3);
            Move(1, 1, 2);
            Move(6, 9, 7);
            Move(2, 2, 5);
            Move(12, 3, 1);
            Move(9, 9, 2);
            Move(10, 1, 3);
            Move(2, 5, 9);
            Move(8, 4, 7);
            Move(13, 7, 6);
            Move(6, 6, 5);
            Move(4, 5, 3);
            Move(2, 5, 4);
            Move(8, 4, 3);
            Move(1, 7, 2);
            Move(15, 2, 7);
            Move(8, 3, 7);
            Move(1, 1, 6);
            Move(7, 7, 1);
            Move(5, 1, 6);
            Move(7, 3, 2);
            Move(3, 1, 6);
            Move(12, 7, 9);
            Move(12, 9, 8);
            Move(1, 7, 1);
            Move(2, 9, 5);
            Move(1, 1, 9);
            Move(4, 4, 2);
            Move(4, 8, 4);
            Move(2, 7, 2);
            Move(4, 6, 5);
            Move(4, 8, 9);
            Move(1, 8, 4);
            Move(5, 5, 3);
            Move(5, 2, 4);
            Move(5, 9, 5);
            Move(1, 3, 6);
            Move(1, 7, 8);
            Move(12, 3, 9);
            Move(4, 2, 6);
            Move(7, 4, 9);
            Move(13, 6, 4);
            Move(3, 6, 9);
            Move(4, 4, 2);
            Move(1, 3, 4);
            Move(21, 9, 7);
            Move(4, 2, 1);
            Move(3, 5, 4);
            Move(8, 7, 6);
            Move(2, 7, 2);
            Move(11, 4, 2);
            Move(1, 9, 7);
            Move(1, 5, 7);
            Move(1, 1, 8);
            Move(5, 2, 5);
            Move(1, 3, 5);
            Move(2, 4, 9);
            Move(3, 4, 8);
            Move(3, 1, 8);
            Move(1, 9, 6);
            Move(8, 7, 8);
            Move(9, 6, 5);
            Move(1, 9, 6);
            Move(1, 6, 4);
            Move(3, 7, 5);
            Move(1, 6, 9);
            Move(12, 5, 1);
            Move(2, 5, 8);
            Move(1, 9, 6);
            Move(2, 7, 6);
            Move(9, 1, 8);
            Move(1, 6, 9);
            Move(1, 9, 2);
            Move(1, 4, 2);
            Move(2, 6, 7);
            Move(5, 8, 3);
            Move(2, 7, 4);
            Move(16, 8, 5);
            Move(2, 3, 8);
            Move(7, 5, 1);
            Move(3, 3, 8);
            Move(7, 5, 7);
            Move(4, 5, 2);
            Move(6, 7, 9);
            Move(2, 9, 6);
            Move(2, 9, 2);
            Move(1, 6, 8);
            Move(12, 2, 6);
            Move(2, 9, 6);
            Move(1, 5, 2);
            Move(3, 5, 4);
            Move(9, 2, 6);
            Move(6, 8, 3);
            Move(1, 7, 5);
            Move(1, 6, 7);
            Move(1, 7, 8);
            Move(1, 5, 8);
            Move(5, 1, 2);
            Move(3, 4, 5);
            Move(4, 6, 8);
            Move(5, 2, 9);
            Move(5, 8, 4);
            Move(1, 1, 4);
            Move(9, 8, 4);
            Move(1, 2, 3);
            Move(3, 6, 8);
            Move(4, 9, 2);
            Move(2, 6, 4);
            Move(2, 3, 1);
            Move(4, 4, 7);
            Move(6, 4, 5);
            Move(10, 6, 8);
            Move(4, 1, 9);
            Move(4, 7, 5);
            Move(3, 3, 9);
            Move(6, 9, 8);
            Move(2, 2, 9);
            Move(8, 4, 3);
            Move(2, 2, 7);
            Move(1, 4, 9);
            Move(6, 3, 8);
            Move(2, 7, 8);
            Move(6, 5, 9);
            Move(5, 5, 6);
            Move(2, 5, 9);
            Move(7, 9, 5);
            Move(2, 1, 9);
            Move(6, 5, 8);
            Move(1, 5, 1);
            Move(2, 3, 6);
            Move(1, 3, 6);
            Move(4, 9, 5);
            Move(1, 3, 4);
            Move(1, 1, 2);
            Move(1, 2, 1);
            Move(1, 6, 8);
            Move(14, 8, 5);
            Move(6, 5, 1);
            Move(16, 8, 3);
            Move(2, 8, 2);
            Move(10, 6, 7);
            Move(1, 6, 9);
            Move(2, 2, 9);
            Move(2, 7, 3);
            Move(1, 8, 5);
            Move(3, 9, 1);
            Move(4, 9, 5);
            Move(9, 3, 8);
            Move(2, 3, 6);
            Move(5, 3, 8);
            Move(1, 4, 2);
            Move(12, 8, 4);
            Move(1, 8, 9);
            Move(4, 5, 9);
            Move(7, 7, 1);
            Move(10, 5, 2);
            Move(2, 5, 2);
            Move(1, 6, 5);
            Move(2, 5, 2);
            Move(5, 2, 6);
            Move(4, 9, 6);
            Move(6, 4, 9);
            Move(2, 3, 4);
            Move(6, 4, 7);
            Move(6, 7, 5);
            Move(10, 1, 5);
            Move(4, 1, 2);
            Move(4, 6, 3);
            Move(6, 9, 7);
            Move(2, 4, 9);
            Move(7, 7, 6);
            Move(1, 9, 7);
            Move(2, 9, 8);
            Move(2, 8, 2);
            Move(1, 2, 5);
            Move(3, 8, 4);
            Move(4, 2, 7);
            Move(3, 4, 7);
            Move(2, 3, 5);
            Move(2, 3, 2);
            Move(18, 5, 3);
            Move(6, 3, 1);
            Move(8, 3, 1);
            Move(8, 7, 9);
            Move(9, 2, 5);
            Move(3, 2, 3);
            Move(7, 3, 7);
            Move(3, 6, 4);
            Move(1, 7, 1);
            Move(7, 6, 7);
            Move(1, 2, 9);
            Move(1, 4, 2);
            Move(13, 7, 2);
            Move(10, 5, 3);
            Move(1, 2, 9);
            Move(7, 1, 5);
            Move(8, 9, 5);
            Move(1, 9, 5);
            Move(1, 9, 8);
            Move(1, 8, 2);
            Move(8, 5, 3);
            Move(18, 3, 5);
            Move(2, 4, 1);
            Move(3, 2, 5);
            Move(27, 5, 1);
            Move(17, 1, 5);
            Move(2, 2, 3);
            Move(1, 6, 5);
            Move(2, 2, 5);
            Move(1, 6, 4);
            Move(1, 6, 9);
            Move(2, 3, 5);
            Move(17, 5, 6);
            Move(1, 9, 3);
            Move(6, 2, 4);
            Move(1, 3, 2);
            Move(3, 4, 9);
            Move(1, 2, 9);
            Move(1, 4, 7);
            Move(3, 5, 2);
            Move(2, 5, 1);
            Move(1, 5, 2);
            Move(1, 7, 3);
            Move(18, 1, 4);
            Move(1, 3, 1);
            Move(5, 4, 2);
            Move(1, 5, 1);
            Move(9, 2, 7);
            Move(1, 4, 5);
            Move(1, 2, 9);
            Move(8, 6, 2);
            Move(13, 4, 2);
            Move(2, 4, 9);
            Move(1, 5, 2);
            Move(1, 6, 8);
            Move(6, 7, 5);
            Move(1, 8, 4);
            Move(1, 7, 6);
            Move(1, 6, 1);
            Move(7, 6, 5);
            Move(1, 7, 9);
            Move(6, 9, 3);
            Move(2, 9, 7);
            Move(2, 5, 7);
            Move(4, 7, 8);
            Move(4, 5, 4);
            Move(1, 6, 7);
            Move(3, 3, 8);
            Move(6, 5, 9);
            Move(2, 3, 5);
            Move(4, 4, 7);
            Move(1, 3, 1);
            Move(2, 2, 3);
            Move(6, 9, 6);
            Move(1, 7, 1);
            Move(19, 2, 4);
            Move(2, 5, 6);
            Move(2, 8, 9);
            Move(2, 1, 2);
            Move(2, 2, 5);
            Move(2, 4, 3);
            Move(4, 6, 2);
            Move(1, 7, 8);
            Move(6, 1, 8);
            Move(3, 5, 1);
            Move(5, 2, 5);
            Move(1, 6, 7);
            Move(9, 8, 1);
            Move(2, 3, 6);
            Move(4, 6, 5);
            Move(1, 6, 2);
            Move(9, 5, 2);
            Move(3, 4, 6);
            Move(12, 4, 6);
            Move(1, 9, 4);
            Move(1, 3, 1);
            Move(3, 4, 8);
            Move(1, 3, 6);
            Move(6, 6, 2);
            Move(1, 4, 5);
            Move(3, 6, 2);
            Move(4, 1, 5);
            Move(1, 5, 1);
            Move(2, 8, 9);
            Move(7, 6, 3);
            Move(1, 3, 1);
            Move(1, 8, 1);
            Move(3, 8, 9);
            Move(4, 3, 5);
            Move(3, 7, 3);
            Move(5, 3, 7);
            Move(1, 9, 1);
            Move(4, 9, 2);
            Move(15, 2, 7);
            Move(14, 1, 7);
            Move(5, 5, 1);
            Move(9, 7, 2);
            Move(1, 9, 6);
            Move(1, 7, 4);
            Move(1, 4, 6);
            Move(2, 6, 2);
            Move(9, 2, 5);
            Move(4, 2, 4);
            Move(4, 7, 5);
            Move(6, 5, 9);
            Move(7, 1, 8);
            Move(6, 2, 8);
            Move(1, 1, 2);
            Move(3, 9, 5);
            Move(18, 7, 8);
            Move(2, 4, 6);
            Move(2, 4, 6);
            Move(3, 7, 6);
            Move(3, 5, 3);
            Move(1, 2, 6);
            Move(5, 6, 8);
            Move(29, 8, 1);
            Move(2, 3, 5);
            Move(25, 1, 6);
            Move(2, 9, 5);
            Move(1, 7, 8);
            Move(6, 8, 2);
            Move(1, 9, 1);
            Move(15, 6, 8);
            Move(1, 3, 8);
            Move(14, 8, 7);
            Move(5, 1, 3);
            Move(1, 6, 2);
            Move(2, 5, 7);
            Move(10, 6, 2);
            Move(4, 5, 7);
            Move(6, 5, 1);
            Move(2, 1, 4);
            Move(19, 7, 9);

            foreach (var s in stacks)
            {
                Console.Write("Stack: " + s.Id + ", Crates: ");
                foreach (var c in s.crates)
                {
                    Console.Write(c + " ");
                }
                Console.WriteLine();
            }

            Console.Write("Top crates: ");
            foreach (var s in stacks)
            {
                Console.Write(s.crates.Last());
            }
            Console.WriteLine();

            void Move(int _cnt, int _from, int _to)
            {
                string c;

                //// first puzzle: move one by one
                //for (int i = 0; i < _cnt; i++)
                //{
                //    c = stacks.Find(x => x.Id == _from).crates.Last();
                //    stacks.Find(x => x.Id == _to).crates.AddLast(c);
                //    stacks.Find(x => x.Id == _from).crates.RemoveLast();
                //}

                //// second puzzle: move all at once
                var cs = new LinkedList<string>();
                for (int i = 0; i < _cnt; i++)
                {
                    c = stacks.Find(x => x.Id == _from).crates.Last();
                    cs.AddLast(c);
                    stacks.Find(x => x.Id == _from).crates.RemoveLast();
                }
                for (int i = 0; i < _cnt; i++)
                {
                    c = cs.Last();
                    stacks.Find(x => x.Id == _to).crates.AddLast(c);
                    cs.RemoveLast();
                }
            }
    }

    }
}
